if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
library(ggplot2)
library(deSolve)
library(reshape2)
# Functions
calculate_derivatives <- function(t, x, parameters){
with(as.list(c(x, parameters)),{
lambda_wt <- beta*I_wt/N
lambda_var <- beta*I_var/N
dS     <- -(lambda_wt + lambda_var)*S
dE_wt  <- lambda_wt*S - sigma*E_wt
dE_var <- lambda_var*S - sigma*E_var
dI_wt  <- sigma*E_wt - gamma*I_wt
dI_var <- sigma*E_var - gamma*I_var
dR     <- gamma*(I_wt + I_var)
dV1    <- 0
dV2    <- 0
return(list(c(dS, dE_wt, dE_var, dI_wt, dI_var, dR, dV1, dV2)))
}
)
}
# Pop parameters
N <- 100000
# Disease parameters
gamma <- 1/5
sigma <- 1/3
#R0 <- beta/gamma
# Vaccine parameters
VE_1_wt <- 0.7
VE_2_wt <- 0.95
VE_1_var <- 0
VE_2_var <- 0
results <- matrix(data = NA, nrow = 4, ncol = 4)
vec_R0 <- c(1.5, 2.0, 2.5, 3.0)
vec_vaxavail <- c(0.05, 0.1, 0.2, 0.3)
row.names(results) <- vec_R0
colnames(results) <- vec_vaxavail*100
irow <- 1
for (this_R0 in vec_R0){
icol <- 1
for (this_vaxavail in vec_vaxavail){
beta <- this_R0*gamma
num_doses <- this_vaxavail*N
# Initial conditions: full dosage and dose-sparing scenarios
I_wt_0 <- 0.01*N
I_var_0 <- 0
V2_0_full <- VE_2_wt*num_doses/2
V1_0_sparing <- VE_1_wt*num_doses
S_0_full <- N - I_wt_0 - I_var_0 - V2_0_full
S_0_sparing <- N - I_wt_0 - I_var_0 - V1_0_sparing
inits_full <- c(S=S_0_full,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=0, V2=V2_0_full)
inits_sparing <- c(S=S_0_sparing,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=V1_0_sparing, V2=0)
parameters <- c(gamma, beta, sigma, N,
VE_1_wt, VE_2_wt, VE_1_var, VE_2_var)
# Solving the differential equations
t <- seq(from=1, to=100, by=1)
df_full <- as.data.frame(lsoda(inits_full, t, calculate_derivatives, parameters))
df_sparing <- as.data.frame(lsoda(inits_sparing, t, calculate_derivatives, parameters))
# # Plot
# df_full_toplot <- melt(df_full, id = "time")
# df_sparing_toplot <- melt(df_sparing, id = "time")
#
# ggplot(df_full_toplot, aes(x = time, y = value/N,
#                     colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
#
# ggplot(df_sparing_toplot, aes(x = time, y = value/N,
#                            colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
# Total cases
diff <- df_full$R[max(t)] - df_sparing$R[max(t)]
if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
library(ggplot2)
library(deSolve)
library(reshape2)
# Functions
calculate_derivatives <- function(t, x, parameters){
with(as.list(c(x, parameters)),{
lambda_wt <- beta*I_wt/N
lambda_var <- beta*I_var/N
dS     <- -(lambda_wt + lambda_var)*S
dE_wt  <- lambda_wt*S + (1-VE_1_wt)*lambda_wt*V1 + (1-VE_2_wt)*lambda_wt*V2 - sigma*E_wt
dE_var <- lambda_var*S + (1-VE_1_var)*lambda_var*V1 + (1-VE_2_var)*lambda_var*V2 - sigma*E_var
dI_wt  <- sigma*E_wt - gamma*I_wt
dI_var <- sigma*E_var - gamma*I_var
dR     <- gamma*(I_wt + I_var)
dV1    <- -((1-VE_1_wt)*lambda_wt + (1-VE_1_var)*lambda_var)*V1
dV2    <- -((1-VE_2_wt)*lambda_wt + (1-VE_2_var)*lambda_var)*V2
return(list(c(dS, dE_wt, dE_var, dI_wt, dI_var, dR, dV1, dV2)))
}
)
}
# Pop parameters
N <- 100000
# Disease parameters
gamma <- 1/5
sigma <- 1/3
#R0 <- beta/gamma
# Vaccine parameters
VE_1_wt <- 0.5
VE_2_wt <- 0.95
VE_1_var <- 0
VE_2_var <- 0
results <- matrix(data = NA, nrow = 4, ncol = 4)
vec_R0 <- c(1.2, 2.0, 2.5, 3.0)
vec_vaxavail <- c(0.05, 0.1, 0.2, 0.3)
row.names(results) <- vec_R0
colnames(results) <- vec_vaxavail*100
irow <- 1
for (this_R0 in vec_R0){
icol <- 1
for (this_vaxavail in vec_vaxavail){
beta <- this_R0*gamma
num_doses <- this_vaxavail*N
# Initial conditions: full dosage and dose-sparing scenarios
I_wt_0 <- 0.01*N
I_var_0 <- 0
V2_0_full <- num_doses/2
V1_0_sparing <- num_doses
S_0_full <- N - I_wt_0 - I_var_0 - V2_0_full
S_0_sparing <- N - I_wt_0 - I_var_0 - V1_0_sparing
inits_full <- c(S=S_0_full,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=0, V2=V2_0_full)
inits_sparing <- c(S=S_0_sparing,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=V1_0_sparing, V2=0)
parameters <- c(gamma, beta, sigma, N,
VE_1_wt, VE_2_wt, VE_1_var, VE_2_var)
# Solving the differential equations
t <- seq(from=1, to=100, by=1)
df_full <- as.data.frame(lsoda(inits_full, t, calculate_derivatives, parameters))
df_sparing <- as.data.frame(lsoda(inits_sparing, t, calculate_derivatives, parameters))
# # Plot
# df_full_toplot <- melt(df_full, id = "time")
# df_sparing_toplot <- melt(df_sparing, id = "time")
#
# ggplot(df_full_toplot, aes(x = time, y = value/N,
#                     colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
#
# ggplot(df_sparing_toplot, aes(x = time, y = value/N,
#                            colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
# Total cases
diff <- df_full$R[max(t)] - df_sparing$R[max(t)]
if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
library(ggplot2)
library(deSolve)
library(reshape2)
# Functions
calculate_derivatives <- function(t, x, parameters){
with(as.list(c(x, parameters)),{
lambda_wt <- beta*I_wt/N
lambda_var <- beta*I_var/N
dS     <- -(lambda_wt + lambda_var)*S
dE_wt  <- lambda_wt*S + (1-VE_1_wt)*lambda_wt*V1 + (1-VE_2_wt)*lambda_wt*V2 - sigma*E_wt
dE_var <- lambda_var*S + (1-VE_1_var)*lambda_var*V1 + (1-VE_2_var)*lambda_var*V2 - sigma*E_var
dI_wt  <- sigma*E_wt - gamma*I_wt
dI_var <- sigma*E_var - gamma*I_var
dR     <- gamma*(I_wt + I_var)
dV1    <- -((1-VE_1_wt)*lambda_wt + (1-VE_1_var)*lambda_var)*V1
dV2    <- -((1-VE_2_wt)*lambda_wt + (1-VE_2_var)*lambda_var)*V2
return(list(c(dS, dE_wt, dE_var, dI_wt, dI_var, dR, dV1, dV2)))
}
)
}
# Pop parameters
N <- 100000
# Disease parameters
gamma <- 1/5
sigma <- 1/3
#R0 <- beta/gamma
# Vaccine parameters
VE_1_wt <- 0.4
VE_2_wt <- 0.95
VE_1_var <- 0
VE_2_var <- 0
results <- matrix(data = NA, nrow = 4, ncol = 4)
vec_R0 <- c(1.2, 2.0, 2.5, 3.0)
vec_vaxavail <- c(0.05, 0.1, 0.2, 0.3)
row.names(results) <- vec_R0
colnames(results) <- vec_vaxavail*100
irow <- 1
for (this_R0 in vec_R0){
icol <- 1
for (this_vaxavail in vec_vaxavail){
beta <- this_R0*gamma
num_doses <- this_vaxavail*N
# Initial conditions: full dosage and dose-sparing scenarios
I_wt_0 <- 0.01*N
I_var_0 <- 0
V2_0_full <- num_doses/2
V1_0_sparing <- num_doses
S_0_full <- N - I_wt_0 - I_var_0 - V2_0_full
S_0_sparing <- N - I_wt_0 - I_var_0 - V1_0_sparing
inits_full <- c(S=S_0_full,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=0, V2=V2_0_full)
inits_sparing <- c(S=S_0_sparing,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=V1_0_sparing, V2=0)
parameters <- c(gamma, beta, sigma, N,
VE_1_wt, VE_2_wt, VE_1_var, VE_2_var)
# Solving the differential equations
t <- seq(from=1, to=100, by=1)
df_full <- as.data.frame(lsoda(inits_full, t, calculate_derivatives, parameters))
df_sparing <- as.data.frame(lsoda(inits_sparing, t, calculate_derivatives, parameters))
# # Plot
# df_full_toplot <- melt(df_full, id = "time")
# df_sparing_toplot <- melt(df_sparing, id = "time")
#
# ggplot(df_full_toplot, aes(x = time, y = value/N,
#                     colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
#
# ggplot(df_sparing_toplot, aes(x = time, y = value/N,
#                            colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
# Total cases
diff <- df_full$R[max(t)] - df_sparing$R[max(t)]
if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
library(ggplot2)
library(deSolve)
library(reshape2)
# Functions
calculate_derivatives <- function(t, x, parameters){
with(as.list(c(x, parameters)),{
lambda_wt <- beta*I_wt/N
lambda_var <- beta*I_var/N
dS     <- -(lambda_wt + lambda_var)*S
dE_wt  <- lambda_wt*S + (1-VE_1_wt)*lambda_wt*V1 + (1-VE_2_wt)*lambda_wt*V2 - sigma*E_wt
dE_var <- lambda_var*S + (1-VE_1_var)*lambda_var*V1 + (1-VE_2_var)*lambda_var*V2 - sigma*E_var
dI_wt  <- sigma*E_wt - gamma*I_wt
dI_var <- sigma*E_var - gamma*I_var
dR     <- gamma*(I_wt + I_var)
dV1    <- -((1-VE_1_wt)*lambda_wt + (1-VE_1_var)*lambda_var)*V1
dV2    <- -((1-VE_2_wt)*lambda_wt + (1-VE_2_var)*lambda_var)*V2
return(list(c(dS, dE_wt, dE_var, dI_wt, dI_var, dR, dV1, dV2)))
}
)
}
# Pop parameters
N <- 100000
# Disease parameters
gamma <- 1/5
sigma <- 1/3
#R0 <- beta/gamma
# Vaccine parameters
VE_1_wt <- 0.6
VE_2_wt <- 0.95
VE_1_var <- 0
VE_2_var <- 0
results <- matrix(data = NA, nrow = 4, ncol = 4)
vec_R0 <- c(1.2, 2.0, 2.5, 3.0)
vec_vaxavail <- c(0.05, 0.1, 0.2, 0.3)
row.names(results) <- vec_R0
colnames(results) <- vec_vaxavail*100
irow <- 1
for (this_R0 in vec_R0){
icol <- 1
for (this_vaxavail in vec_vaxavail){
beta <- this_R0*gamma
num_doses <- this_vaxavail*N
# Initial conditions: full dosage and dose-sparing scenarios
I_wt_0 <- 0.01*N
I_var_0 <- 0
V2_0_full <- num_doses/2
V1_0_sparing <- num_doses
S_0_full <- N - I_wt_0 - I_var_0 - V2_0_full
S_0_sparing <- N - I_wt_0 - I_var_0 - V1_0_sparing
inits_full <- c(S=S_0_full,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=0, V2=V2_0_full)
inits_sparing <- c(S=S_0_sparing,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=V1_0_sparing, V2=0)
parameters <- c(gamma, beta, sigma, N,
VE_1_wt, VE_2_wt, VE_1_var, VE_2_var)
# Solving the differential equations
t <- seq(from=1, to=100, by=1)
df_full <- as.data.frame(lsoda(inits_full, t, calculate_derivatives, parameters))
df_sparing <- as.data.frame(lsoda(inits_sparing, t, calculate_derivatives, parameters))
# # Plot
# df_full_toplot <- melt(df_full, id = "time")
# df_sparing_toplot <- melt(df_sparing, id = "time")
#
# ggplot(df_full_toplot, aes(x = time, y = value/N,
#                     colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
#
# ggplot(df_sparing_toplot, aes(x = time, y = value/N,
#                            colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
# Total cases
diff <- df_full$R[max(t)] - df_sparing$R[max(t)]
if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
1.5 + 4.5*0.487-6*0.307
1.5 + 0.5*(4.5*0.937 - 6*0.88)
1.5 + 4.5*0.937 - 6*0.88
1.5 + 4.5*0.937 - 6*0.88 - 1.5
270/30
setwd("~/student_testing_project/unvacc_testing_in_mixed_pop_repo")
# setup.R works correctly if you've already installed fonts. if not, go to setup.R line 13.
source("setup.R")
# _____________________________________________________________________
# FIG1 - infections with no testing ####
# _____________________________________________________________________
# for loop to run fig 1
for (i in 1){
#* Panel B - infected over time ####
this_phi <- 0.58 # fully vacc. in US as of 11/4
this_theta <- 0 # no testing
this_q <- 0
df_B <- run_leaky_model(this_phi, VE_I, VE_S, q = this_q, psi = this_psi, X_I = this_X_I, X_S = this_X_S)
B <- ggplot(df_B, aes(x = time)) +
geom_line(aes(y = I_v), col = mylightgray, size = my_linesize) +
geom_line(aes(y = I_u + I_x), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = I_v + I_u + I_x), col = myblack, size = my_linesize) +
ylab("Infected (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 270)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 875)) +
onlyy_theme
#*  Panel D - transmission mode over time (i.e. who caused new daily cases) ####
df <- data.frame(time = t)
list_who_caused <- compute_who_caused_daily_infections(this_phi, VE_I, VE_S, q = this_q,
this_psi, this_X_I, this_X_S)
df$cases_in_v_by_v <- unlist(list_who_caused[[1]])
df$cases_in_v_by_u <- unlist(list_who_caused[[2]])
df$cases_in_u_by_v <- unlist(list_who_caused[[3]])
df$cases_in_u_by_u <- unlist(list_who_caused[[4]])
D <- ggplot(df, aes(x = time)) +
geom_line(aes(y = cases_in_u_by_v), col = mylightteal, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_u), col = mylightorange, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_u), col = mydarkorange, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_v), col = mydarkteal, size = my_linesize) +
ylab("New daily infections (#) ") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 270)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 20)) +
alllabels_theme
#* Panel C - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_S = VE_S, VE_I = VE_I, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$breakthrough <- sapply(phi_vec, compute_percent_breakthrough_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
C <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_infections/N*100), col = myblack, size = my_linesize) +
ylab("Total infected (%)") +
xlab("Population vaccination rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100),
sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
theme(axis.title.y.right = element_text(color = mylightgray),
axis.title.y.left = element_text(color = myblack),
axis.title.x.bottom = element_blank(),
axis.text.x.bottom = element_blank(),
plot.margin=unit(c(5.5, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1)) - 1
if (Reff_1 <= 100){
C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
#* Panel E - cumulative transmission mode over phi ####
df <- data.frame(phi = phi_vec)
lists_who_caused <- lapply(phi_vec, compute_who_caused_cases_tot,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
mat_who_caused <- matrix(unlist(lists_who_caused), ncol=6, byrow=TRUE)
df$cases_in_v_by_ext <- mat_who_caused[,5]
df$cases_in_u_by_ext <- mat_who_caused[,6]
df$cases_in_v_by_v <- mat_who_caused[,1]
df$cases_in_u_by_v <- mat_who_caused[,3]
df$cases_in_v_by_u <- mat_who_caused[,2]
df$cases_in_u_by_u <- mat_who_caused[,4]
df_toplot <- melt(df, id = c("phi"))
E <- ggplot(df_toplot, aes(x=phi*100, y=value*100, color = variable)) +
geom_line(size = my_linesize) +
ylab(paste("Transmission mode (%) ")) +
xlab(expression("Population vaccination rate (%)")) +
labs(fill = "") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100.1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(mygray, mylightgray, mydarkteal, mylightteal, mylightorange,
mydarkorange)) +
#labels = c("v to v", "v to u", "u to v", "u to u")) +
theme(legend.position = "none") +
geom_vline(xintercept = 58)
if (Reff_1 <= 100){
E <- E + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
}
# export as cairo_pdf,8x5.5in
ggarrange(B, NULL, C, NULL, NULL, NULL, D, NULL, E,
labels = c("b", NA, "c", NA, NA, NA, "d", NA, "e"),
nrow = 3,
ncol = 3,
align = "hv",
widths = c(1, -0.1, 1),
heights = c(1, -0.13, 1))
ggsave("fig1_test.pdf", device = cairo_pdf, width = 8, height = 5.5)
