#onlyy_theme +
xlab("") +
ggtitle(expression(R[eff]))
}
fig3 <- ggarrange(A, NULL, B, NULL, C, NULL, D, NULL, E, NULL,
nrow = 1,
widths = c(1, -0.09, 1, -0.2, 1, -0.2, 1 , -0.09, 1, 0.1),
align = "hv",
labels = c(' a', NA, ' b', NA,'     c',NA, '     d', NA,'   e', NA),
label.y = 0.79)
annotate_figure(fig3,
bottom = text_grob("Population vaccination rate (%)", size = 14, family = "Arial",
vjust = -1.2, hjust = 0))
ggsave("fig3_psi50.pdf", device = cairo_pdf, width = 10, height = 3.5)
# _____________________________________________________________________
# FIG1 - infections with no testing ####
# _____________________________________________________________________
# for loop to run fig 1
for (i in 1){
#* Panel B - infected over time ####
this_phi <- 0.55
this_theta <- 0 # no testing
this_q <- 0
df_B <- run_leaky_model(this_phi, VE_I, VE_S, q = this_q, psi = this_psi, X_I = this_X_I, X_S = this_X_S)
B <- ggplot(df_B, aes(x = time)) +
geom_line(aes(y = I_v), col = mylightgray, size = my_linesize) +
geom_line(aes(y = I_u + I_x), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = I_v + I_u + I_x), col = myblack, size = my_linesize) +
ylab("Infected (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1300)) +
onlyy_theme
#*  Panel D - transmission mode over time (i.e. who caused new daily cases) ####
df <- data.frame(time = t)
list_who_caused <- compute_who_caused_daily_infections(this_phi, VE_I, VE_S, q = this_q,
this_psi, this_X_I, this_X_S)
df$cases_in_v_by_v <- unlist(list_who_caused[[1]])
df$cases_in_v_by_u <- unlist(list_who_caused[[2]])
df$cases_in_u_by_v <- unlist(list_who_caused[[3]])
df$cases_in_u_by_u <- unlist(list_who_caused[[4]])
D <- ggplot(df, aes(x = time)) +
geom_line(aes(y = cases_in_u_by_v), col = mylightteal, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_u), col = mylightorange, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_u), col = mydarkorange, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_v), col = mydarkteal, size = my_linesize) +
ylab("New daily infections (#) ") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 150)) +
alllabels_theme
#* Panel C - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_S = VE_S, VE_I = VE_I, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$breakthrough <- sapply(phi_vec, compute_percent_breakthrough_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
C <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_infections/N*100), col = myblack, size = my_linesize) +
ylab("Total infected (%)") +
xlab("Population vaccination rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100),
sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
theme(axis.title.y.right = element_text(color = mylightgray),
axis.title.y.left = element_text(color = myblack),
axis.title.x.bottom = element_blank(),
axis.text.x.bottom = element_blank(),
plot.margin=unit(c(5.5, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1)) - 1
if (Reff_1 <= 100){
C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
#* Panel E - cumulative transmission mode over phi ####
df <- data.frame(phi = phi_vec)
lists_who_caused <- lapply(phi_vec, compute_who_caused_cases_tot,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
mat_who_caused <- matrix(unlist(lists_who_caused), ncol=6, byrow=TRUE)
df$cases_in_v_by_ext <- mat_who_caused[,5]
df$cases_in_u_by_ext <- mat_who_caused[,6]
df$cases_in_v_by_v <- mat_who_caused[,1]
df$cases_in_u_by_v <- mat_who_caused[,3]
df$cases_in_v_by_u <- mat_who_caused[,2]
df$cases_in_u_by_u <- mat_who_caused[,4]
df_toplot <- melt(df, id = c("phi"))
E <- ggplot(df_toplot, aes(x=phi*100, y=value*100, color = variable)) +
geom_line(size = my_linesize) +
ylab(paste("Transmission mode (%) ")) +
xlab(expression("Population vaccination rate (%)")) +
labs(fill = "") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100.1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(mygray, mylightgray, mydarkteal, mylightteal, mylightorange,
mydarkorange)) +
#labels = c("v to v", "v to u", "u to v", "u to u")) +
theme(legend.position = "none")
if (Reff_1 <= 100){
E <- E + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
}
# export as cairo_pdf,8x5.5in
ggarrange(B, NULL, C, NULL, NULL, NULL, D, NULL, E,
labels = c("b", NA, "c", NA, NA, NA, "d", NA, "e"),
nrow = 3,
ncol = 3,
align = "hv",
widths = c(1, -0.1, 1),
heights = c(1, -0.13, 1))
ggsave("fig1_psi50.pdf", device = cairo_pdf, width = 8, height = 5.5)
VE_S <- 1
VE_I <- 1
X_I <- 1
X_S <- 1
# _____________________________________________________________________
# FIG1 - infections with no testing ####
# _____________________________________________________________________
# for loop to run fig 1
for (i in 1){
#* Panel B - infected over time ####
this_phi <- 0.55
this_theta <- 0 # no testing
this_q <- 0
df_B <- run_leaky_model(this_phi, VE_I, VE_S, q = this_q, psi = this_psi, X_I = this_X_I, X_S = this_X_S)
B <- ggplot(df_B, aes(x = time)) +
geom_line(aes(y = I_v), col = mylightgray, size = my_linesize) +
geom_line(aes(y = I_u + I_x), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = I_v + I_u + I_x), col = myblack, size = my_linesize) +
ylab("Infected (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1300)) +
onlyy_theme
#*  Panel D - transmission mode over time (i.e. who caused new daily cases) ####
df <- data.frame(time = t)
list_who_caused <- compute_who_caused_daily_infections(this_phi, VE_I, VE_S, q = this_q,
this_psi, this_X_I, this_X_S)
df$cases_in_v_by_v <- unlist(list_who_caused[[1]])
df$cases_in_v_by_u <- unlist(list_who_caused[[2]])
df$cases_in_u_by_v <- unlist(list_who_caused[[3]])
df$cases_in_u_by_u <- unlist(list_who_caused[[4]])
D <- ggplot(df, aes(x = time)) +
geom_line(aes(y = cases_in_u_by_v), col = mylightteal, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_u), col = mylightorange, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_u), col = mydarkorange, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_v), col = mydarkteal, size = my_linesize) +
ylab("New daily infections (#) ") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 150)) +
alllabels_theme
#* Panel C - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_S = VE_S, VE_I = VE_I, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$breakthrough <- sapply(phi_vec, compute_percent_breakthrough_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
C <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_infections/N*100), col = myblack, size = my_linesize) +
ylab("Total infected (%)") +
xlab("Population vaccination rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100),
sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
theme(axis.title.y.right = element_text(color = mylightgray),
axis.title.y.left = element_text(color = myblack),
axis.title.x.bottom = element_blank(),
axis.text.x.bottom = element_blank(),
plot.margin=unit(c(5.5, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1)) - 1
if (Reff_1 <= 100){
C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
#* Panel E - cumulative transmission mode over phi ####
df <- data.frame(phi = phi_vec)
lists_who_caused <- lapply(phi_vec, compute_who_caused_cases_tot,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
mat_who_caused <- matrix(unlist(lists_who_caused), ncol=6, byrow=TRUE)
df$cases_in_v_by_ext <- mat_who_caused[,5]
df$cases_in_u_by_ext <- mat_who_caused[,6]
df$cases_in_v_by_v <- mat_who_caused[,1]
df$cases_in_u_by_v <- mat_who_caused[,3]
df$cases_in_v_by_u <- mat_who_caused[,2]
df$cases_in_u_by_u <- mat_who_caused[,4]
df_toplot <- melt(df, id = c("phi"))
E <- ggplot(df_toplot, aes(x=phi*100, y=value*100, color = variable)) +
geom_line(size = my_linesize) +
ylab(paste("Transmission mode (%) ")) +
xlab(expression("Population vaccination rate (%)")) +
labs(fill = "") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100.1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(mygray, mylightgray, mydarkteal, mylightteal, mylightorange,
mydarkorange)) +
#labels = c("v to v", "v to u", "u to v", "u to u")) +
theme(legend.position = "none")
if (Reff_1 <= 100){
E <- E + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
}
# export as cairo_pdf,8x5.5in
ggarrange(B, NULL, C, NULL, NULL, NULL, D, NULL, E,
labels = c("b", NA, "c", NA, NA, NA, "d", NA, "e"),
nrow = 3,
ncol = 3,
align = "hv",
widths = c(1, -0.1, 1),
heights = c(1, -0.13, 1))
this_psi
Reff_1
R0
#* Panel C - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_S = VE_S, VE_I = VE_I, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff
View(df)
phi <- 0.5
rate_v_and_v <- 1
rate_v_and_u <- 1
rate_u_and_u <-
1
C <- matrix(c(phi*N*rate_v_and_v, (1-phi)*psi*N*rate_u_and_v, (1-phi)*(1-psi)*N*rate_u_and_v,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u),
nrow = 3, ncol = 3,
byrow = TRUE)
psi <- 0.5
C <- matrix(c(phi*N*rate_v_and_v, (1-phi)*psi*N*rate_u_and_v, (1-phi)*(1-psi)*N*rate_u_and_v,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u),
nrow = 3, ncol = 3,
byrow = TRUE)
rate_u_and_v <- 1
C <- matrix(c(phi*N*rate_v_and_v, (1-phi)*psi*N*rate_u_and_v, (1-phi)*(1-psi)*N*rate_u_and_v,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u,
phi*N*rate_u_and_v, (1-phi)*psi*N*rate_u_and_u, (1-phi)*(1-psi)*N*rate_u_and_u),
nrow = 3, ncol = 3,
byrow = TRUE)
D_susceptibility <- diag(c(alpha*(1-VE_S), alpha*(1-X_S), alpha))
D_infectiousness <- diag(c((1-VE_I)/gamma, (1-X_I)*(1-theta)/gamma, (1-theta)/gamma))
NGM <- D_susceptibility %*% C %*% D_infectiousness
theta <- 0
D_susceptibility <- diag(c(alpha*(1-VE_S), alpha*(1-X_S), alpha))
D_infectiousness <- diag(c((1-VE_I)/gamma, (1-X_I)*(1-theta)/gamma, (1-theta)/gamma))
NGM <- D_susceptibility %*% C %*% D_infectiousness
NGM
R0
eigs <- eigen(NGM)$values
Reff <- max(Re(eigs))
VE_S
VE_I
this_theta
this_q
this_psi
this_X_I
this_X_I <- 1
this_X_S <- 1
# _____________________________________________________________________
# FIG1 - infections with no testing ####
# _____________________________________________________________________
# for loop to run fig 1
for (i in 1){
#* Panel B - infected over time ####
this_phi <- 0.55
this_theta <- 0 # no testing
this_q <- 0
df_B <- run_leaky_model(this_phi, VE_I, VE_S, q = this_q, psi = this_psi, X_I = this_X_I, X_S = this_X_S)
B <- ggplot(df_B, aes(x = time)) +
geom_line(aes(y = I_v), col = mylightgray, size = my_linesize) +
geom_line(aes(y = I_u + I_x), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = I_v + I_u + I_x), col = myblack, size = my_linesize) +
ylab("Infected (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1300)) +
onlyy_theme
#*  Panel D - transmission mode over time (i.e. who caused new daily cases) ####
df <- data.frame(time = t)
list_who_caused <- compute_who_caused_daily_infections(this_phi, VE_I, VE_S, q = this_q,
this_psi, this_X_I, this_X_S)
df$cases_in_v_by_v <- unlist(list_who_caused[[1]])
df$cases_in_v_by_u <- unlist(list_who_caused[[2]])
df$cases_in_u_by_v <- unlist(list_who_caused[[3]])
df$cases_in_u_by_u <- unlist(list_who_caused[[4]])
D <- ggplot(df, aes(x = time)) +
geom_line(aes(y = cases_in_u_by_v), col = mylightteal, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_u), col = mylightorange, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_u), col = mydarkorange, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_v), col = mydarkteal, size = my_linesize) +
ylab("New daily infections (#) ") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 150)) +
alllabels_theme
#* Panel C - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_S = VE_S, VE_I = VE_I, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
df$breakthrough <- sapply(phi_vec, compute_percent_breakthrough_infections,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
C <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_infections/N*100), col = myblack, size = my_linesize) +
ylab("Total infected (%)") +
xlab("Population vaccination rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100),
sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
theme(axis.title.y.right = element_text(color = mylightgray),
axis.title.y.left = element_text(color = myblack),
axis.title.x.bottom = element_blank(),
axis.text.x.bottom = element_blank(),
plot.margin=unit(c(5.5, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1)) - 1
if (Reff_1 <= 100){
C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
#* Panel E - cumulative transmission mode over phi ####
df <- data.frame(phi = phi_vec)
lists_who_caused <- lapply(phi_vec, compute_who_caused_cases_tot,
this_VE_I = VE_I, this_VE_S = VE_S, theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S)
mat_who_caused <- matrix(unlist(lists_who_caused), ncol=6, byrow=TRUE)
df$cases_in_v_by_ext <- mat_who_caused[,5]
df$cases_in_u_by_ext <- mat_who_caused[,6]
df$cases_in_v_by_v <- mat_who_caused[,1]
df$cases_in_u_by_v <- mat_who_caused[,3]
df$cases_in_v_by_u <- mat_who_caused[,2]
df$cases_in_u_by_u <- mat_who_caused[,4]
df_toplot <- melt(df, id = c("phi"))
E <- ggplot(df_toplot, aes(x=phi*100, y=value*100, color = variable)) +
geom_line(size = my_linesize) +
ylab(paste("Transmission mode (%) ")) +
xlab(expression("Population vaccination rate (%)")) +
labs(fill = "") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100.1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(mygray, mylightgray, mydarkteal, mylightteal, mylightorange,
mydarkorange)) +
#labels = c("v to v", "v to u", "u to v", "u to u")) +
theme(legend.position = "none")
if (Reff_1 <= 100){
E <- E + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
}
}
# export as cairo_pdf,8x5.5in
ggarrange(B, NULL, C, NULL, NULL, NULL, D, NULL, E,
labels = c("b", NA, "c", NA, NA, NA, "d", NA, "e"),
nrow = 3,
ncol = 3,
align = "hv",
widths = c(1, -0.1, 1),
heights = c(1, -0.13, 1))
ggsave("fig1_test.pdf", device = cairo_pdf, width = 8, height = 5.5)
Reff <- compute_Reff(phi_vec, VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0, psi = psi_vec, X_I = 0.62, X_S = 0.8)
phi_vec <- seq(0, 1, by = 0.1)
psi_vec <- seq(0, 1, by = 0.1)
Reff <- compute_Reff(phi_vec, VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0, psi = psi_vec, X_I = 0.62, X_S = 0.8)
test <- 0:1
length(phi_vec)
phi_vec <- seq(0, 1, by = 0.1)
psi_vec <- seq(0, 1, by = 0.1)
Reff_mat <- matrix(NA, nrow = length(psi_vec), ncol = length(phi_vec))
for (i in 1:length(psi_vec)){
for (j in 1:length(phi_vec)){
this_Reff <- compute_Reff(phi, VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0,
psi, X_I = 0.62, X_S = 0.8)
Reff_mat[i,j] <- this_Reff
}
}
View(Reff_mat)
Reff_mat <- matrix(NA, nrow = length(psi_vec), ncol = length(phi_vec))
for (i in 1:length(psi_vec)){
for (j in 1:length(phi_vec)){
this_Reff <- compute_Reff(phi_vec[j], VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0,
psi_vec[i], X_I = 0.62, X_S = 0.8)
Reff_mat[i,j] <- this_Reff
}
}
contour(phi_vec, psi_vec, Reff_mat)
contour2D(phi_vec, psi_vec, Reff_mat)
library(plot3D)
install.packages("plot3D")
contour2D(phi_vec, psi_vec, Reff_mat)
# TEST of contour plot
library(plot3D)
contour2D(phi_vec, psi_vec, Reff_mat)
contour2D(Reff_mat, phi_vec, psi_vec)
df <- expand.grid(phi_vec, psi_vec)
View(df)
df <- expand.grid(phi = phi_vec, psi = psi_vec)
length(df)
size(df)
dim(df)
dim(df)[1]
df$phi
df$phi[1]
df <- expand.grid(phi = phi_vec, psi = psi_vec)
df$Reff <- NA
for (i in dim(df)[1]){
df$Reff[i] <- compute_Reff(df$phi[i], VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0,
df$psi[i], X_I = 0.62, X_S = 0.8)
}
ggplot(df, aes(x = phi, y = psi, z = Reff)) +
stat_contour()
df <- expand.grid(phi = phi_vec, psi = psi_vec)
df$Reff <- NA
for (i in 1:dim(df)[1]){
df$Reff[i] <- compute_Reff(df$phi[i], VE_S = 0.8, VE_I = 0.62, theta = 0, q = 0,
df$psi[i], X_I = 0.62, X_S = 0.8)
}
ggplot(df, aes(x = phi, y = psi, z = Reff)) +
stat_contour()
ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour()
ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour(size = 1)
ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
library(directlabels)
install.packages("directlabels")
library(directlabels)
g <- ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
g <- g + direct.labels(g)
g <- g + direct.label(g)
g <- g + direct.label(g, "bottom.pieces")
g <- g + direct.label(g, “bottom.pieces”)
g <- ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
g <- g + direct.label(g, “bottom.pieces”)
g <- g + direct.label(g, "bottom.pieces")
g <- ggplot(df, aes(x = phi, y = psi, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
g <- direct.label(g, "bottom.pieces")
g
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
g <- direct.label(g, "bottom.pieces")
g
g <- direct.label(g, "first.qp")
g
gnew <- direct.label(g, "first.qp")
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
gnew <- direct.label(g, "first.qp")
gnew
gnew <- direct.label(g, "top.points")
gnew
gnew <- direct.label(g, function(d,...)transform(gapply(d,subset,y==max(y)),vjust=0))
gnew
gnew <- direct.label(g, function(d,...)transform(gapply(d,subset,y==mean(y)),vjust=0))
gnew
gnew <- direct.label(g, "top.points", cex = 0.5)
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
gnew <- direct.label(g, "top.points", cex = 0.5)
gnew <- direct.label(g, "midrange")
gnew
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1)
gnew <- direct.label(g, list(last.points, hjust = 0.7,
vjust = 1))
gnew
gnew <- direct.label(g, list(last.points, hjust = 0.7,
vjust = -1))
gnew
direct.label(g, list(last.points, hjust = 1,
vjust = -2))
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0))
g
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100)) +
ylab("psi") +
xlab("phi") +
ggtitle(paste(R[eff]))
g <- ggplot(df, aes(x = phi*100, y = psi*100, z = Reff, colour = ..level..)) +
stat_contour(breaks = 1:R0, size = 1) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100)) +
ylab("psi") +
xlab("phi") +
ggtitle(expression(R[eff]))
direct.label(g, list(last.points, hjust = 1, vjust = -2))
