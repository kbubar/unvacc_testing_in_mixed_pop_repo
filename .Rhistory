library(reshape2)
# Functions
calculate_derivatives <- function(t, x, parameters){
with(as.list(c(x, parameters)),{
lambda_wt <- beta*I_wt/N
lambda_var <- beta*I_var/N
dS     <- -(lambda_wt + lambda_var)*S
dE_wt  <- lambda_wt*S + (1-VE_1_wt)*lambda_wt*V1 + (1-VE_2_wt)*lambda_wt*V2 - sigma*E_wt
dE_var <- lambda_var*S + (1-VE_1_var)*lambda_var*V1 + (1-VE_2_var)*lambda_var*V2 - sigma*E_var
dI_wt  <- sigma*E_wt - gamma*I_wt
dI_var <- sigma*E_var - gamma*I_var
dR     <- gamma*(I_wt + I_var)
dV1    <- -((1-VE_1_wt)*lambda_wt + (1-VE_1_var)*lambda_var)*V1
dV2    <- -((1-VE_2_wt)*lambda_wt + (1-VE_2_var)*lambda_var)*V2
return(list(c(dS, dE_wt, dE_var, dI_wt, dI_var, dR, dV1, dV2)))
}
)
}
# Pop parameters
N <- 100000
# Disease parameters
gamma <- 1/5
sigma <- 1/3
#R0 <- beta/gamma
# Vaccine parameters
VE_1_wt <- 0.6
VE_2_wt <- 0.95
VE_1_var <- 0
VE_2_var <- 0
results <- matrix(data = NA, nrow = 4, ncol = 4)
vec_R0 <- c(1.2, 2.0, 2.5, 3.0)
vec_vaxavail <- c(0.05, 0.1, 0.2, 0.3)
row.names(results) <- vec_R0
colnames(results) <- vec_vaxavail*100
irow <- 1
for (this_R0 in vec_R0){
icol <- 1
for (this_vaxavail in vec_vaxavail){
beta <- this_R0*gamma
num_doses <- this_vaxavail*N
# Initial conditions: full dosage and dose-sparing scenarios
I_wt_0 <- 0.01*N
I_var_0 <- 0
V2_0_full <- num_doses/2
V1_0_sparing <- num_doses
S_0_full <- N - I_wt_0 - I_var_0 - V2_0_full
S_0_sparing <- N - I_wt_0 - I_var_0 - V1_0_sparing
inits_full <- c(S=S_0_full,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=0, V2=V2_0_full)
inits_sparing <- c(S=S_0_sparing,
E_wt=0, E_var=0,
I_wt=I_wt_0, I_var=I_var_0,
R=0,
V1=V1_0_sparing, V2=0)
parameters <- c(gamma, beta, sigma, N,
VE_1_wt, VE_2_wt, VE_1_var, VE_2_var)
# Solving the differential equations
t <- seq(from=1, to=100, by=1)
df_full <- as.data.frame(lsoda(inits_full, t, calculate_derivatives, parameters))
df_sparing <- as.data.frame(lsoda(inits_sparing, t, calculate_derivatives, parameters))
# # Plot
# df_full_toplot <- melt(df_full, id = "time")
# df_sparing_toplot <- melt(df_sparing, id = "time")
#
# ggplot(df_full_toplot, aes(x = time, y = value/N,
#                     colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
#
# ggplot(df_sparing_toplot, aes(x = time, y = value/N,
#                            colour = variable, group = variable)) +
#   geom_line() +
#   xlab("Time (days)") +
#   ylab("Proportion of the population") +
#   scale_color_discrete(name = "State")
# Total cases
diff <- df_full$R[max(t)] - df_sparing$R[max(t)]
if (diff > 0){
out <- "Dose sparing"
#print(paste("R0:", R0, ", one dose, diff: ", round(diff), "cases"))
} else {
out <- "Full dosage"
#print(paste("R0:", R0, ", two doses, diff: ", -1*round(diff), "cases"))
}
results[irow, icol] <- out
icol <- icol + 1
}
irow <- irow + 1
}
print(results)
1.5 + 4.5*0.487-6*0.307
1.5 + 0.5*(4.5*0.937 - 6*0.88)
1.5 + 4.5*0.937 - 6*0.88
1.5 + 4.5*0.937 - 6*0.88 - 1.5
270/30
# setup.R works correctly if you've already installed fonts. if not, go to setup.R line 22.
source("setup.R")
setwd("~/student_testing_project/unvacc_testing_in_mixed_pop_repo")
# setup.R works correctly if you've already installed fonts. if not, go to setup.R line 22.
source("setup.R")
testing_everyone <- 0 # if 0, just testing unvacc. when implementing testing
for (i in 1){
#* Panel B - infected over time ####
this_theta <- 0 # no testing
this_q <- 0 # well-mixed
df <- run_leaky_model(this_phi, this_VE_I, this_VE_S, this_theta, this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
B <- ggplot(df, aes(x = time)) +
geom_line(aes(y = I_v + I_h), col = mylightgray, size = my_linesize) +
geom_line(aes(y = I_u + I_x), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = I_v + I_u + I_x + I_h), col = myblack, size = my_linesize) +
ylab("Infected (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1000)) + # 2500 for R0 = 6
alllabels_theme
#* Panel C - hospitalized over time ####
# Assuming an 8 day lag between infection and hospitalization
# df$hosp_u <- NA
# df$hosp_v <- NA
# df$hosp_u[1:7] <- 0
# df$hosp_v[1:7] <- 0
# df$hosp_u[8:length(t)] <- (df$I_u[1:(length(t)-7)] + df$I_x[1:(length(t)-7)]*(1-this_X_P))*infection_hosp_rate_delta
# df$hosp_v[8:length(t)] <- (df$I_v[1:(length(t)-7)]*(1-this_VE_P) + df$I_h[1:(length(t)-7)]*(1-this_H_P))*infection_hosp_rate_delta
#
list_hosp <- compute_new_daily_hosp(this_phi, this_VE_I, this_VE_S, this_VE_P,
this_theta, this_q,
this_psi, this_X_I, this_X_S, this_X_P,
this_H_I, this_H_S, this_H_P)
df$hosp_u <- unlist(list_hosp[[1]])
df$hosp_v <- unlist(list_hosp[[2]])
C <- ggplot(df, aes(x = time)) +
geom_line(aes(y = hosp_v), col = mylightgray, size = my_linesize) +
geom_line(aes(y = hosp_u), col = mygray, size = my_linesize, linetype = "longdash")  +
geom_line(aes(y = hosp_u + hosp_v), col = myblack, size = my_linesize) +
ylab("New daily hosp. (#)") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0,2)) + # 2500 for R0 = 6
alllabels_theme
#*  Panel D - transmission mode over time (i.e. who caused new daily cases) ####
df <- data.frame(time = t)
list_who_caused <- compute_who_caused_daily_infections(this_phi, this_VE_I, this_VE_S,
this_theta, this_q,
this_psi, this_X_I, this_X_S,
this_H_I, this_H_S)
df$cases_in_v_by_v <- unlist(list_who_caused[[1]])
df$cases_in_v_by_u <- unlist(list_who_caused[[2]])
df$cases_in_u_by_v <- unlist(list_who_caused[[3]])
df$cases_in_u_by_u <- unlist(list_who_caused[[4]])
df$cases_in_v_by_ext <- unlist(list_who_caused[[5]])
df$cases_in_u_by_ext <- unlist(list_who_caused[[6]])
D <- ggplot(df, aes(x = time)) +
geom_line(aes(y = cases_in_v_by_ext), col = mygray, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_ext), col = mylightgray, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_v), col = mylightteal, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_u), col = mylightorange, size = my_linesize) +
geom_line(aes(y = cases_in_u_by_u), col = mydarkorange, size = my_linesize) +
geom_line(aes(y = cases_in_v_by_v), col = mydarkteal, size = my_linesize) +
ylab("New daily infections (#) ") +
xlab("Time (days)") +
scale_x_continuous(expand = c(0, 0), limits = c(0, 200)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 80)) + # C(0, 200) for R0 = 6
alllabels_theme
#* Panel E - total infections and breakthrough cases over phi ####
df <- data.frame(phi = phi_vec)
baseline_inf <- compute_tot_infections(phi = 0, this_VE_I, this_VE_S, this_theta, this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S )
df$tot_infections <- sapply(phi_vec, compute_tot_infections,
VE_I = this_VE_I, VE_S = this_VE_S,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
df$Reff <- sapply(phi_vec, compute_Reff,
VE_I = this_VE_I, VE_S = this_VE_S,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
df$breakthrough <- sapply(phi_vec, compute_percent_breakthrough_infections,
VE_I = this_VE_I, VE_S = this_VE_S,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
E <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_infections/baseline_inf*100), col = myblack, size = my_linesize) +
ylab("Percentage") +#"Total infected (%)") +
xlab("Population vacc. rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
# sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
alllabels_theme +
theme(#axis.title.y.right = element_text(color = mylightgray),
#axis.title.y.left = element_text(color = myblack),
#axis.title.x.bottom = element_blank(),
#axis.text.x.bottom = element_blank(),
plot.margin=unit(c(6, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1),500) - 1
if (Reff_1 <= 100){
# C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
E <- E + geom_point(aes(x = Reff_1, y = 0), shape = 20, size = 0.4)
}
inf_transition <- min(which(df$breakthrough >= 50)) - 1
E <- E + geom_vline(xintercept = inf_transition, alpha = 1, linetype = "dashed", size = 0.5, col = infcolor)
print(paste0("Percentage of infections in unvaccinated population with 58% vaccination rate: ",100-df[df$phi==0.58,]$breakthrough))
#* Panel F - total infections and breakthrough cases over phi ####
baseline_hosp <- compute_tot_hospitalizations(phi = 0, this_VE_I, this_VE_S, this_VE_P, infection_hosp_rate_delta,
this_theta, this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S, X_P = this_X_P,
H_I = this_H_I, H_S = this_H_S, H_P = this_H_P)
df$tot_hosp <- sapply(phi_vec, compute_tot_hospitalizations,
VE_I = this_VE_I, VE_S = this_VE_S, VE_P = this_VE_P,
infection_hosp_rate = infection_hosp_rate_delta,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S, X_P = this_X_P,
H_I = this_H_I, H_S = this_H_S, H_P = this_H_P)
df$breakthrough_hosp <- sapply(phi_vec, compute_percent_breakthrough_hosp,
VE_I = this_VE_I, VE_S = this_VE_S, VE_P = this_VE_P,
infection_hosp_rate = infection_hosp_rate_delta,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S, X_P = this_X_P,
H_I = this_H_I, H_S = this_H_S, H_P = this_H_P)
F <- ggplot(df, aes(x=phi*100)) +
geom_line(aes(y=breakthrough_hosp), col = mylightgray, size = my_linesize) +
geom_line(aes(y=tot_hosp/baseline_hosp*100), col = myblack, size = my_linesize) +
ylab("Percentage") +#"Total infected (%)") +
xlab("Population vacc. rate (%)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
# sec.axis = sec_axis(~., name="Breakthrough infections (%)")) +
scale_x_continuous(expand = c(0, 0)) +
alllabels_theme +
theme(#axis.title.y.right = element_text(color = mylightgray),
#axis.title.y.left = element_text(color = myblack),
#axis.title.x.bottom = element_blank(),
#axis.text.x.bottom = element_blank(),
plot.margin=unit(c(6, 2, 5.5, 2), "pt")) # top, right, bottom, left
Reff_1 <- min(which(df$Reff <= 1),500) - 1
if (Reff_1 <= 100){
# C <- C + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
F <- F + geom_point(aes(x = Reff_1, y = 0), shape = 20, size = 0.4)
}
hosp_transition <- min(which(df$breakthrough_hosp >= 50)) - 1
F <- F + geom_vline(xintercept = hosp_transition, alpha = 1, linetype = "dashed", size = 0.5, col = hospcolor)
print(paste0("Percentage of hospitalizations in unvaccinated population with 58% vaccination rate: ",
100-df[df$phi==0.58,]$breakthrough_hosp))
#* Panel G - cumulative transmission mode over phi ####
df <- data.frame(phi = phi_vec)
lists_who_caused <- lapply(phi_vec, compute_who_caused_cases_tot,
VE_I = this_VE_I, VE_S = this_VE_S,
theta = this_theta, q = this_q,
psi = this_psi, X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
mat_who_caused <- matrix(unlist(lists_who_caused), ncol=6, byrow=TRUE)
df$cases_in_v_by_ext <- mat_who_caused[,5]
df$cases_in_u_by_ext <- mat_who_caused[,6]
df$cases_in_v_by_v <- mat_who_caused[,1]
df$cases_in_u_by_v <- mat_who_caused[,3]
df$cases_in_v_by_u <- mat_who_caused[,2]
df$cases_in_u_by_u <- mat_who_caused[,4]
df_toplot <- melt(df, id = c("phi"))
df$total_by_v <- df$cases_in_u_by_v + df$cases_in_v_by_v
df$total_by_u <- df$cases_in_u_by_u + df$cases_in_v_by_u
G <- ggplot(df_toplot, aes(x=phi*100, y=value*100, color = variable)) +
geom_line(size = my_linesize) +
ylab(paste("Transmission mode (%) ")) +
xlab(expression("Population vacc. rate (%)")) +
labs(fill = "") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100.1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_color_manual(values = c(mygray, mylightgray, mydarkteal, mylightteal, mylightorange,
mydarkorange)) +
#labels = c("v to v", "v to u", "u to v", "u to u")) +
theme(legend.position = "none")
if (Reff_1 <= 100){
# E <- E + geom_vline(xintercept = Reff_1, alpha = 0.5, linetype = "dashed", size = 0.5)
G <- G + geom_point(aes(x = Reff_1, y = 0), shape = 20, size = 0.4, color = "black")
}
trans_transition <- min(which(df$total_by_u < df$total_by_v)) - 1
G <- G + geom_vline(xintercept = trans_transition, alpha = 1, linetype = "dashed", size = 0.5, col = transmcolor)
}
# export as cairo_pdf,7x5.5in
ggarrange(NULL, NULL, NULL, NULL, NULL, NULL,
B, NULL, C, NULL, D, NULL, NULL, NULL,
NULL, NULL, NULL, NULL,
E, NULL, F, NULL, G, NULL,
labels = c(rep(NA, 6),
"b", NA, "c", NA, "d", NA,
rep(NA, 6),
"e", NA, " f", NA, "g", NA),
nrow = 4,
ncol = 6,
align = "hv",
widths = c(1, 0, 1, 0, 1, 0.05),
heights = c(0.05, 1, 0.05, 1),
label.y = 1.04)
testing_everyone <- 0 # if 0, just testing unvacc. when implementing testing
R0 <- 6
alpha <- R0*gamma/N # transmissibility
ptm <- proc.time()
phi_vec <- seq(0, 1, by = 0.01) # fine grid : by = 0.01 (~2 hr)
psi_vec <- seq(0, 1, by = 0.01)
df <- expand.grid(phi = phi_vec, psi = psi_vec)
df$Reff <- NA
df$tot_hosp <- NA
df$breakthrough <- NA
df$dom_transmission <- NA
df$tot_infections <- NA
df$breakthrough_hosp <- NA
scenarios = c("baseline","waning","boosted","omicron")
for (s in scenarios){
if(s == "baseline"){
this_VE_I <- baseline_VE_I
this_VE_S <- baseline_VE_S
this_VE_P <- baseline_VE_P
this_H_I  <- baseline_H_I
this_H_S  <- baseline_H_S
this_H_P  <- baseline_H_P
this_X_S  <- delta_X_S
this_X_I  <- delta_X_I
this_X_P  <- delta_X_P
hosp_rate <- infection_hosp_rate_delta
}
if(s == "waning"){
this_VE_I <- waning_VE_I
this_VE_S <- waning_VE_S
this_VE_P <- waning_VE_P
this_H_I  <- waning_H_I
this_H_S  <- waning_H_S
this_H_P  <- waning_H_P
this_X_S  <- delta_X_S
this_X_I  <- delta_X_I
this_X_P  <- delta_X_P
hosp_rate <- infection_hosp_rate_delta
}
if(s == "boosted"){
this_VE_I <- boosted_VE_I
this_VE_S <- boosted_VE_S
this_VE_P <- boosted_VE_P
this_H_I  <- boosted_H_I
this_H_S  <- boosted_H_S
this_H_P  <- boosted_H_P
this_X_S  <- delta_X_S
this_X_I  <- delta_X_I
this_X_P  <- delta_X_P
hosp_rate <- infection_hosp_rate_delta
}
if(s == "omicron"){
this_VE_I <- omicron_VE_I
this_VE_S <- omicron_VE_S
this_VE_P <- omicron_VE_P
this_H_I  <- omicron_H_I
this_H_S  <- omicron_H_S
this_H_P  <- omicron_H_P
this_X_S  <- omicron_X_S
this_X_I  <- omicron_X_I
this_X_P  <- omicron_X_P
hosp_rate <- infection_hosp_rate_omicron
}
for (i in 1:dim(df)[1]){
df$Reff[i] <- compute_Reff(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
df$tot_infections[i] <- compute_tot_infections(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
df$breakthrough[i] <- compute_percent_breakthrough_infections(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S)
df$dom_transmission[i] <- (compute_dominant_transmission(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S,
H_I = this_H_I, H_S = this_H_S))*100
df$tot_hosp[i] <- compute_tot_hospitalizations(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S, VE_P = this_VE_P,
infection_hosp_rate = hosp_rate,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S, X_P = this_X_P,
H_I = this_H_I, H_S = this_H_S, H_P = this_H_P)
df$breakthrough_hosp[i] <- compute_percent_breakthrough_hosp(df$phi[i], VE_I = this_VE_I, VE_S = this_VE_S, VE_P = this_VE_P,
infection_hosp_rate = hosp_rate,
theta = 0, q = this_q,
df$psi[i], X_I = this_X_I, X_S = this_X_S, X_P = this_X_P,
H_I = this_H_I, H_S = this_H_S, H_P = this_H_P)
}
if(s == "baseline"){
baselinedf <- df
}
if(s == "waning"){
waningdf <- df
}
if(s == "boosted"){
boosteddf <- df
}
if(s == "omicron"){
omicrondf <- df
}
}
saveRDS(baselinedf,file="df_SuppFig2_baseline_R06.RData")
saveRDS(waningdf,file="df_SuppFig2_waning_R06.RData")
saveRDS(boosteddf,file="df_SuppFig2_boosted_R06.RData")
saveRDS(omicrondf,file="df_SuppFig2_omicron_R06.RData")
proc.time() - ptm
theme_set(theme_minimal(base_size = 11))
theme_update(text = element_text(family="Arial", size = 11),
plot.title = element_text(size = 11, hjust = 0.5, family="Arial"))
# plot Reff with number of infections
p_Reff_inf <- ggplot(baselinedf, aes(x = phi*100, y = psi*100, z = Reff))+ #, colour = ..level..)) +
geom_tile(aes(fill = tot_infections)) +
geom_contour(breaks = 1:R0, size = 0.4, color = "white") +
#geom_text_contour(breaks = 1:R0, color = "white", rotate = FALSE, skip = 0) +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
ylab("Infection-acquired\nimmunity (%)") +
xlab("Population vaccination rate (%)") +
#ggtitle(expression(R[eff])) +
ggtitle("\nTotal infections") +
scale_fill_viridis(option="viridis", limits = c(0, N)) +
coord_fixed(1) +
labs(fill = "") +
theme(legend.text = element_text(size = 10),
legend.spacing.x = unit(0.15, 'cm'))
# plot Reff with number of hospitalizations
p_Reff_hosp <- ggplot(baselinedf, aes(x = phi*100, y = psi*100, z = Reff))+ #, colour = ..level..)) +
geom_tile(aes(fill = tot_hosp)) +
geom_contour(breaks = 1:R0, size = 0.4, color = "white") +
#geom_text_contour(breaks = 1:R0, color = "white", rotate = FALSE, skip = 0) +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0)) +
ylab("Infection-acquired\nimmunity (%)") +
xlab("Population vaccination rate (%)") +
#ggtitle(expression(R[eff])) +
ggtitle("\nTotal hospitalizations") +
scale_fill_viridis(option="viridis", limits = c(0, 400)) +
coord_fixed(1) +
labs(fill = "") +
theme(legend.text = element_text(size = 10),
legend.spacing.x = unit(0.15, 'cm'))
# plot % infections in the unvaccinated
p_infection <- ggplot(baselinedf, aes(x = phi*100, y = psi*100, z = breakthrough)) +
geom_tile(aes(fill = 100 - breakthrough)) +
stat_contour(breaks = c(50), size = 0.4, col = "white") +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
ylab("Infection-acquired immunity (%)") +
xlab("Population vaccination rate (%)") +
ggtitle("% of infections among\nunvaccinated individuals") +
labs(fill = "Percent\ninfections\nin vacc.") +
theme(legend.position = "none") +
scale_fill_gradientn(colours = cet_pal(5, name = "inferno")) +
coord_fixed(1)
# plot dominant transmission
p_transmission <- ggplot(baselinedf, aes(x = phi*100, y = psi*100, z = dom_transmission)) +
geom_tile(aes(fill = dom_transmission)) +
stat_contour(breaks = c(50), size = 0.4, color = "white") +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
ylab("") + # ylab("Infection-acquired immunity (%)") +
xlab("Population vaccination rate (%)") +
ggtitle("% of transmission from\nunvaccinated individuals") +
labs(fill = "")+ #"Percent of\ntransmission\nby unvacc.") +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.title.align = 0.5,
legend.spacing.x = unit(0.15, 'cm')) +
scale_fill_gradientn(colours = cet_pal(5, name = "inferno"))+
coord_fixed(1)
# plot % hospitalizations in the unvaccinated
p_hospitalization <- ggplot(baselinedf, aes(x = phi*100, y = psi*100, z = breakthrough_hosp)) +
geom_tile(aes(fill = 100 - breakthrough_hosp)) +
stat_contour(breaks = c(50), size = 0.4, col = "white") +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
ylab("") + # ylab("Infection-acquired immunity (%)") +
xlab("Population vaccination rate (%)") +
ggtitle("% of hospitalizations among\nunvaccinated individuals") +
labs(fill = "Percent\nhospitalizations\nin vacc.") +
theme(legend.position = "none") +
scale_fill_gradientn(colours = cet_pal(5, name = "inferno")) +
coord_fixed(1)
inf_legend <- get_legend(p_Reff_inf)
p_Reff_inf <- p_Reff_inf + theme(legend.position = "none")
hosp_legend <- get_legend(p_Reff_hosp)
p_Reff_hosp <- p_Reff_hosp + theme(legend.position = "none")
percent_legend <- get_legend(p_transmission)
p_transmission <- p_transmission + theme(legend.position = "none")
fig2top <- ggarrange(NULL,p_Reff_inf, NULL, inf_legend, NULL, p_Reff_hosp, NULL, hosp_legend,
labels = c(NA, "a", NA, NA, "b", NA, NA, NA),
nrow = 1,
ncol = 8,
#align = "hv",
widths = c(0.1, 1, -0.05, 0.5, 0.01, 1, -0.05, 0.5),
label.y = 0.95)
fig2bottom <- ggarrange(p_infection, NULL, p_transmission, NULL, p_hospitalization, percent_legend,
labels = c("c", NA, "d", NA, "e", NA),
nrow = 1,
ncol = 6,
#align = "hv",
widths = c(1, 0.05, 1, 0.05, 1, 0.3),
label.y = 1)
lay <- cbind(c(1, 2))
fig2 <- arrangeGrob(fig2top, fig2bottom, layout_matrix = lay,
heights = c(1, 1))
ggsave("SuppFig2.svg", fig2, device = svg, width = 8, height = 5)
